import random
import csv
import matplotlib.pyplot as plt

# Define the list of first five filenames
file_names = [
    "app_memory_percentiles.anon.d01.csv",
    "app_memory_percentiles.anon.d02.csv",
    "app_memory_percentiles.anon.d03.csv",
    "app_memory_percentiles.anon.d04.csv",
    "app_memory_percentiles.anon.d05.csv"
]

# Read the first file to get the unique combinations of HashOwner and HashApp
first_file = file_names[0]
unique_combinations = set()
with open(first_file, 'r') as file:
    reader = csv.DictReader(file)
    for row in reader:
        combination = (row['HashOwner'], row['HashApp'])
        unique_combinations.add(combination)

# Loop through until a line is found with the same combination in every file
while True:
    # Pick a random combination
    random_combination = random.choice(list(unique_combinations))

    # Check if the combination exists in every file
    found_in_all_files = True
    values = {}
    for file_name in file_names:
        with open(file_name, 'r') as file:
            reader = csv.DictReader(file)
            found = False
            for row in reader:
                combination = (row['HashOwner'], row['HashApp'])
                if combination == random_combination:
                    found = True
                    values[file_name] = {
                        'AverageAllocatedMb': float(row['AverageAllocatedMb']),
                        'AverageAllocatedMb_pct1': float(row['AverageAllocatedMb_pct1']),
                        'AverageAllocatedMb_pct5': float(row['AverageAllocatedMb_pct5']),
                        'AverageAllocatedMb_pct25': float(row['AverageAllocatedMb_pct25']),
                        'AverageAllocatedMb_pct50': float(row['AverageAllocatedMb_pct50']),
                        'AverageAllocatedMb_pct75': float(row['AverageAllocatedMb_pct75']),
                        'AverageAllocatedMb_pct95': float(row['AverageAllocatedMb_pct95']),
                        'AverageAllocatedMb_pct99': float(row['AverageAllocatedMb_pct99']),
                        'AverageAllocatedMb_pct100': float(row['AverageAllocatedMb_pct100'])
                    }
                    break
            if not found:
                found_in_all_files = False
                break

    # Break the loop if the combination was found in every file
    if found_in_all_files:
        break

# Print the values of first the file name followed by the percentile averages
for file_name, line_values in values.items():
    print("Values in", file_name)
    for key, value in line_values.items():
        print(key, ":", value)
    print()

# Read and print the SampleCount value for each file (integrate into loop above? TBD...)
for file_name in file_names:
    with open(file_name, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            combination = (row['HashOwner'], row['HashApp'])
            if combination == random_combination:
                print("SampleCount for", file_name)
                print("SampleCount:", int(row['SampleCount']))
                print()
                break

# Create a line chart which plots the percentiles for the selected combination for all five files
percentiles = ['1', '5', '25', '50', '75', '95', '99', '100']
fig, ax = plt.subplots()

for i, (file_name, line_values) in enumerate(values.items()):
    values_list = [line_values[f'AverageAllocatedMb_pct{pct}'] for pct in percentiles]
    ax.plot(percentiles, values_list, label=f"24h Period: {i+1}")

ax.set_xlabel('Percentile')
ax.set_ylabel('Average Allocated Memory per Application (MB)')
ax.set_title('Percentile values for five 24h periods of random function')
ax.legend()

# Set the color of the top and right spines to white
ax.spines['top'].set_color('white')
ax.spines['right'].set_color('white')

plt.show()
